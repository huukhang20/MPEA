// <auto-generated />
using System;
using MPEA.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MPEA.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MPEA.Domain.Models.Chat", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("gen_random_uuid()");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("text");

                    b.Property<string>("SenderId")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Chat", (string)null);
                });

            modelBuilder.Entity("MPEA.Domain.Models.Exchange", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool>("AgreementTerm")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExchangeTypeId")
                        .HasColumnType("text");

                    b.Property<string>("OffererId")
                        .HasColumnType("text");

                    b.Property<string>("ProviderId")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ExchangeTypeId");

                    b.HasIndex("OffererId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Exchange", (string)null);
                });

            modelBuilder.Entity("MPEA.Domain.Models.ExchangePart", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("text");

                    b.Property<string>("ExchangerId")
                        .HasColumnType("text");

                    b.Property<int?>("Quantity")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<string>("SparePartId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ExchangeId");

                    b.HasIndex("ExchangerId");

                    b.HasIndex("SparePartId");

                    b.ToTable("ExchangePart", (string)null);
                });

            modelBuilder.Entity("MPEA.Domain.Models.ExchangeType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("ExchangeType", (string)null);
                });

            modelBuilder.Entity("MPEA.Domain.Models.Feedback", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExchangeId")
                        .HasColumnType("text");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExchangeId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("MPEA.Domain.Models.Notification", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("MPEA.Domain.Models.Report", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Report", (string)null);
                });

            modelBuilder.Entity("MPEA.Domain.Models.SparePart", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TechnicalSpecifications")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("WarrantyId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WarrantyId")
                        .IsUnique();

                    b.ToTable("SparePart", (string)null);
                });

            modelBuilder.Entity("MPEA.Domain.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AvatarURL")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("MPEA.Domain.Models.UserAddress", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("MPEA.Domain.Models.Warranty", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Warranty", (string)null);
                });

            modelBuilder.Entity("MPEA.Domain.Models.Wishlist", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SparePartId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SparePartId");

                    b.HasIndex("UserId");

                    b.ToTable("Wishlist", (string)null);
                });

            modelBuilder.Entity("MPEA.Domain.Models.Chat", b =>
                {
                    b.HasOne("MPEA.Domain.Models.User", "Receiver")
                        .WithMany("ChatReceiveds")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MPEA.Domain.Models.User", "Sender")
                        .WithMany("ChatSents")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("MPEA.Domain.Models.Exchange", b =>
                {
                    b.HasOne("MPEA.Domain.Models.ExchangeType", "ExchangeType")
                        .WithMany("Exchange")
                        .HasForeignKey("ExchangeTypeId");

                    b.HasOne("MPEA.Domain.Models.User", "Offerer")
                        .WithMany("ExchangeOffers")
                        .HasForeignKey("OffererId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MPEA.Domain.Models.User", "Provider")
                        .WithMany("ExchangeProviders")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ExchangeType");

                    b.Navigation("Offerer");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("MPEA.Domain.Models.ExchangePart", b =>
                {
                    b.HasOne("MPEA.Domain.Models.Exchange", "Exchange")
                        .WithMany("ExchangeParts")
                        .HasForeignKey("ExchangeId");

                    b.HasOne("MPEA.Domain.Models.User", "Exchager")
                        .WithMany("ExchangeParts")
                        .HasForeignKey("ExchangerId");

                    b.HasOne("MPEA.Domain.Models.SparePart", "SparePart")
                        .WithMany("ExchangePart")
                        .HasForeignKey("SparePartId");

                    b.Navigation("Exchager");

                    b.Navigation("Exchange");

                    b.Navigation("SparePart");
                });

            modelBuilder.Entity("MPEA.Domain.Models.Feedback", b =>
                {
                    b.HasOne("MPEA.Domain.Models.Exchange", "Exchange")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ExchangeId");

                    b.HasOne("MPEA.Domain.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Exchange");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MPEA.Domain.Models.Notification", b =>
                {
                    b.HasOne("MPEA.Domain.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MPEA.Domain.Models.Report", b =>
                {
                    b.HasOne("MPEA.Domain.Models.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MPEA.Domain.Models.SparePart", b =>
                {
                    b.HasOne("MPEA.Domain.Models.User", "User")
                        .WithMany("SpareParts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MPEA.Domain.Models.Warranty", "Warranty")
                        .WithOne("SparePart")
                        .HasForeignKey("MPEA.Domain.Models.SparePart", "WarrantyId");

                    b.Navigation("User");

                    b.Navigation("Warranty");
                });

            modelBuilder.Entity("MPEA.Domain.Models.UserAddress", b =>
                {
                    b.HasOne("MPEA.Domain.Models.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("MPEA.Domain.Models.Wishlist", b =>
                {
                    b.HasOne("MPEA.Domain.Models.SparePart", "SparePart")
                        .WithMany("Wishlist")
                        .HasForeignKey("SparePartId");

                    b.HasOne("MPEA.Domain.Models.User", "User")
                        .WithMany("Wishlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("SparePart");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MPEA.Domain.Models.Exchange", b =>
                {
                    b.Navigation("ExchangeParts");

                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("MPEA.Domain.Models.ExchangeType", b =>
                {
                    b.Navigation("Exchange");
                });

            modelBuilder.Entity("MPEA.Domain.Models.SparePart", b =>
                {
                    b.Navigation("ExchangePart");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("MPEA.Domain.Models.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ChatReceiveds");

                    b.Navigation("ChatSents");

                    b.Navigation("ExchangeOffers");

                    b.Navigation("ExchangeParts");

                    b.Navigation("ExchangeProviders");

                    b.Navigation("Feedbacks");

                    b.Navigation("Notifications");

                    b.Navigation("Reports");

                    b.Navigation("SpareParts");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("MPEA.Domain.Models.Warranty", b =>
                {
                    b.Navigation("SparePart")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
